
#ifndef _Random_MT_Standard_Specification_H_
#define _Random_MT_Standard_Specification_H_

#include "random/base/interface.h"
#include "random/mt/interface.h"
#include "array/1d/fill.h"

namespace mysimulator {

  template <unsigned int Fac>
  struct MersenneTwister<StandardMT,Fac> : public RandomBase {

    public:

      typedef MersenneTwister<StandardMT,Fac> Type;
      typedef RandomBase  ParentType;

      static const unsigned int N;
      static const unsigned int M;
      static const unsigned int dNM;
      static const unsigned int NmOne;
      static const unsigned int MmOne;
      static const unsigned int MatrixA;
      static const unsigned int Upp;
      static const unsigned int Low;
      static const unsigned int Mag[2];
      static const unsigned int Mask32Bit;

      Array1D<unsigned int> s;
      unsigned int sl;

      MersenneTwister() : s(), sl(0) { assert(Fac==0); }
      ~MersenneTwister() { clearData(); }

      void clearData() { release(s); sl=0; }
      bool isvalid() const { return IsValid(s); }

      virtual void init(const unsigned int& seed) {
        mysimulator::fill(s,0U);
        s[0]=seed&Mask32Bit;
        unsigned int r=s[0];
        for(sl=1;sl<N;++sl) {
          r=1812433253UL*(r^(r>>30))+sl;
          r&=Mask32Bit;
          s[sl]=r;
        }
        sl=1;
      }

      void init(const unsigned int* key, const unsigned int& nkey,
                const unsigned int& off=uZero, const int& step=iOne) {
        assert(IsValid(key));
        init(19650218UL);
        unsigned int i,j,k,g,r;
        i=1;  j=0;  g=off;  r=s[0];
        k=(nkey<N?N:nkey);
        for(;k;--k) {
          r=(s[i]^((r^(r>>30))*1664525UL))+key[g]+(j++);
          r&=Mask32Bit;
          s[i++]=r;
          g+=step;
          if(i>=N)    { s[0]=r; i=1; }
          if(j>=nkey) { j=0; g=off;  }
        }
        for(k=NmOne;k;--k) {
          r=(s[i]^((r^(r>>30))*1566083941UL))-i;
          r&=Mask32Bit;
          s[i++]=r;
          if(i>=N)    { s[0]=r; i=1; }
        }
        s[0]=Upp;
        sl=1;
      }

      void init(Array1DContent<unsigned int>& key) { init(key.start,key.size); }

      template <typename T>
      const T rand() {
        Error("This type of data cannot be generated by MT_Standard!");
        return static_cast<T>(cZero);
      }

      const double doubleClose0Close1();
      const double doubleClose0Open1();
      const double doubleOpen0Open1();
      const double double53BitSlow();
      const double double63BitSlow();

      virtual const double randomDouble();
      virtual const unsigned int randomUInt();

    private:

      MersenneTwister(const Type&) {}
      Type& operator=(const Type&) { return *this; }

  };

  template <unsigned int Fac>
  const unsigned int MersenneTwister<StandardMT,Fac>::N=624;
  template <unsigned int Fac>
  const unsigned int MersenneTwister<StandardMT,Fac>::M=397;
  template <unsigned int Fac>
  const unsigned int MersenneTwister<StandardMT,Fac>::dNM=
    MersenneTwister<StandardMT>::N-MersenneTwister<StandardMT>::M;
  template <unsigned int Fac>
  const unsigned int MersenneTwister<StandardMT,Fac>::NmOne=
    MersenneTwister<StandardMT>::N-1;
  template <unsigned int Fac>
  const unsigned int MersenneTwister<StandardMT,Fac>::MmOne=
    MersenneTwister<StandardMT>::M-1;
  template <unsigned int Fac>
  const unsigned int MersenneTwister<StandardMT,Fac>::MatrixA=0x9908B0DFUL;
  template <unsigned int Fac>
  const unsigned int MersenneTwister<StandardMT,Fac>::Upp=0x80000000UL;
  template <unsigned int Fac>
  const unsigned int MersenneTwister<StandardMT,Fac>::Low=0x7FFFFFFFUL;
  template <unsigned int Fac>
  const unsigned int MersenneTwister<StandardMT,Fac>::Mag[2]=
      {0x0UL,MersenneTwister<StandardMT>::MatrixA};
  template <unsigned int Fac>
  const unsigned int MersenneTwister<StandardMT,Fac>::Mask32Bit=0xFFFFFFFFUL;

  template <>
  template <>
  const unsigned int MersenneTwister<StandardMT,0U>::rand<unsigned int>() {
    unsigned int u;
    if(sl>=N) {
      unsigned int k;
      for(k=0;k<dNM;++k) {
        u=(s[k]&Upp)|(s[k+1]&Low);
        s[k]=s[k+M]^(u>>1)^Mag[u&0x1UL];
      }
      for(;k<NmOne;++k) {
        u=(s[k]&Upp)|(s[k+1]&Low);
        s[k]=s[k-dNM]^(u>>1)^Mag[u&0x1UL];
      }
      u=(s[NmOne]&Upp)|(s[0]&Low);
      s[NmOne]=s[MmOne]^(u>>1)^Mag[u&0x1UL];
      sl=0;
    }
    u=s[sl++];
    u^=(u>>11);
    u^=(u<<7)&0x9D2C5680UL;
    u^=(u<<15)&0xEFC60000UL;
    u^=(u>>18);
    return u;
  }
  template <>
  template <>
  const int MersenneTwister<StandardMT,0U>::rand<int>(){
    return static_cast<int>(rand<unsigned int>()>>1);
  }
  template <>
  template <>
  const double MersenneTwister<StandardMT,0U>::rand<double>() {
    long x,y;
    x=static_cast<long>(rand<unsigned int>()>>5);
    y=static_cast<long>(rand<unsigned int>()>>6);
    return (x*67108864.0+y)*(1./9007199254740992.0);
  }
  template <>
  template <>
  const long double MersenneTwister<StandardMT,0U>::rand<long double>() {
    unsigned long x,y;
    x=static_cast<unsigned long>(rand<unsigned int>());
    y=static_cast<unsigned long>(rand<unsigned int>());
    return
      static_cast<long double>(x*(1./4294967296.0))+
      static_cast<long double>(y*(1./18446744073709551616.0))+
      (0.5+0.5/4294967296.0);
  }

  template <unsigned int Fac>
  const double MersenneTwister<StandardMT,Fac>::doubleClose0Close1() {
    int i=static_cast<int>(rand<unsigned int>());
    return static_cast<double>(i)*(1./4294967295.)+(0.5+0.5/4294967295.);
  }
  template <unsigned int Fac>
  const double MersenneTwister<StandardMT,Fac>::doubleClose0Open1() {
    int i=static_cast<int>(rand<unsigned int>());
    return static_cast<double>(i)*(1./4294967296.)+0.5;
  }
  template <unsigned int Fac>
  const double MersenneTwister<StandardMT,Fac>::doubleOpen0Open1() {
    int i=static_cast<int>(rand<unsigned int>());
    return static_cast<double>(i)*(1./4294967296.)+(0.5+0.5/4294967296.);
  }

  template <unsigned int Fac>
  const double MersenneTwister<StandardMT,Fac>::double53BitSlow() {
    unsigned int x,y;
    x=rand<unsigned int>();
    y=rand<unsigned int>();
    return (static_cast<double>(x)*67108864.0+static_cast<double>(y))*
           (1./9007199254740992.0);
  }
  template <unsigned int Fac>
  const double MersenneTwister<StandardMT,Fac>::double63BitSlow() {
    unsigned int x,y;
    x=rand<unsigned int>();
    y=rand<unsigned int>();
    return 
    static_cast<long double>(x|static_cast<unsigned long long>(y)<<32)*
    (1./18446744073709551616.0L);
  }

  template <unsigned int Fac>
  const double MersenneTwister<StandardMT,Fac>::randomDouble() {
    return rand<double>();
  }
  template <unsigned int Fac>
  const unsigned int MersenneTwister<StandardMT,Fac>::randomUInt() {
    return rand<unsigned int>();
  }

}

#endif

