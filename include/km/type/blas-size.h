
/**
 * @file type/blas-size.h
 * @brief Generate type used in \c BLAS operations
 *
 * Some objects with the data type different from \c double or \c float
 * can also be operated with \c BLAS operations (such as copy or swap).
 * It is necessary to find out the compatible type recognized by
 * \c BLAS operations. This file defines the objects to implement the
 * type conversion. The conversion is based on the comparison of the
 * storage size of concerned types (rather than enumerating all possible
 * types), which makes this method valid for more cases.
 *
 *
 * @author Jun | junwang.nju@gmail.com
 */

#ifndef _Type_BlasSize_H_
#define _Type_BlasSize_H_

namespace mysimulator {

  /**
   * @class BlasSizeState
   * @brief generator the state of input type related to \c BLAS functions
   *
   * This class includes a static flag to indicating the state related to
   * \c BLAS functions. Here \c 1 mplies that input type has the same size
   * as \c double, \c 2 as \c float, and \c 0 for not compatible with
   * \c BLAS. The isolated state object may be used in other objects.
   *
   * @tparam T the input type
   */
  template <typename T>
  class BlasSizeState {
    public:
      /**
       * @var BlasSizeState::State
       * @brief the static flag indicating result of type comparison
       */
      static const unsigned int State;
  };

  /**
   * @var BlasSizeState::State
   * the value of state is assigned based on the comparing the size of
   * input type with BLAS-compatible type (\c double and \c flaot)
   */
  template <typename T>
  const unsigned int BlasSizeState<T>::State=
    (sizeof(T)==sizeof(double)?1:
    (sizeof(T)==sizeof(float)?2:0));

  /**
   * @class BlasSizeProduce
   * @brief the object to produce expect type for BLAS function
   *
   * this class is used to generate the type based on state. This is
   * an intermediate layer to produce act type. for default case,
   * the trait Type is not defined.
   *
   * @tparam State the state generated by class BlasSizeState
   */
  template <unsigned int State>
  class BlasSizeProduce {};

  /**
   * @brief specialized BlasSizeProduce with state \c 1
   *
   * this corresponds to \c double type.
   */
  template <> class BlasSizeProduce<1> {
    public:
      /** @typedef Type
       * @brief it is defined as \c double, which used as type output
       */
      typedef double Type;
  };
  /**
   * @brief specialized BlasSizeProduce with state \c 2
   *
   * this corresponds to \c float type.
   */
  template <> class BlasSizeProduce<2> {
    public:
      /** @typedef Type
       * @brief it is defined as \c float, which used as type output
       */
      typedef float Type;
  };

  /**
   * @class BlasSize
   * @brief the class to produce \c BLAS -compatible type
   *
   * This class generates type compatible with \c BLAS functions based on
   * input type. This is implemented with BlasSizeState and BlasSizeProduce.
   *
   * @tparam T the input type
   */
  template <typename T>
  class BlasSize {
    public:
      /** @typedef Type
       * @brief the resultant type to match requirement of \c BLAS function
       */
      typedef typename BlasSizeProduce<BlasSizeState<T>::State>::Type Type;
  };

}

#endif

